#include "configurationpage.h"
#include "ui_configurationpage.h"

/////////////////////////////////////////////////////////////
/// \brief ConfigurationPage::ConfigurationPage
/// Default constructor, connects all the ui elements to
/// functions in the class
///
/// \param parent
/// The parent widget that called this constructor
///
/// \param isVideo
/// Set to true if the user is viewing a video
///
ConfigurationPage::ConfigurationPage(QWidget *parent, bool isVideo) :
    QWidget(parent),
    ui(new Ui::ConfigurationPage),
    _isVideo(isVideo)
{
    ui->setupUi(this);

    // connect the colour changing buttons to their slots
    connect(ui->btnRed, SIGNAL(released()), this, SLOT(btnRed_Clicked()));
    connect(ui->btnBlue, SIGNAL(released()), this, SLOT(btnBlue_Clicked()));
    connect(ui->btnYellow, SIGNAL(released()), this, SLOT(btnYellow_Clicked()));
    connect(ui->btnGreen, SIGNAL(released()), this, SLOT(btnGreen_Clicked()));
    connect(ui->btnBlack, SIGNAL(released()), this, SLOT(btnBlack_Clicked()));
    connect(ui->btnWhite, SIGNAL(released()), this, SLOT(btnWhite_Clicked()));

    // connect the finish and pause button to their slots
    connect(ui->btnPause, SIGNAL(released()), this, SLOT(btnPause_Clicked()));
    connect(ui->btnPause, SIGNAL(released()), this, SLOT(btnFinish_Clicked()));

    // connect the sliders for changing the HSV values to their slots
    connect(ui->horizontalSliderHMax, SIGNAL(valueChanged(int)), this, SLOT(h_max_Changed));
    connect(ui->horizontalSliderHMin, SIGNAL(valueChanged(int)), this, SLOT(h_min_Changed));
    connect(ui->horizontalSliderSMax, SIGNAL(valueChanged(int)), this, SLOT(s_max_Changed));
    connect(ui->horizontalSliderSMin, SIGNAL(valueChanged(int)), this, SLOT(s_min_Changed));
    connect(ui->horizontalSliderVMax, SIGNAL(valueChanged(int)), this, SLOT(v_max_Changed));
    connect(ui->horizontalSliderVMin, SIGNAL(valueChanged(int)), this, SLOT(v_min_Changed));

    // if the user is not viewing a video, hide the pause button
    if (!_isVideo)
        ui->btnPause->setVisible(false);
}

/////////////////////////////////////////////////////////////
/// \brief ConfigurationPage::~ConfigurationPage
/// Default destructor, generated by QT
///
ConfigurationPage::~ConfigurationPage()
{
    delete ui;
}

// TODO : Check if all these are accurate

/////////////////////////////////////////////////////////////
/// \brief ConfigurationPage::btnRed_Click
/// Handles the user changing the colour to red
///
void ConfigurationPage::btnRed_Click() {
    ChangeHSVValues(0,5,75,125,75,125);
}

/////////////////////////////////////////////////////////////
/// \brief ConfigurationPage::btnBlue_Click
/// Handles the user changing the colour to blue
///
void ConfigurationPage::btnBlue_Click() {
    ChangeHSVValues(225,255,75,125,75,125);
}

/////////////////////////////////////////////////////////////
/// \brief ConfigurationPage::btnYellow_Click
/// Handles the user changint the colour to yellow
///
void ConfigurationPage::btnYellow_Click() {
    ChangeHSVValues(50,70,75,125,75,125);
}

/////////////////////////////////////////////////////////////
/// \brief ConfigurationPage::btnGreen_Click
/// Handles the user changint the colour to green
///
void ConfigurationPage::btnGreen_Click() {
    ChangeHSVValues(100,135,75,125,75,125);
}

/////////////////////////////////////////////////////////////
/// \brief ConfigurationPage::btnBlack_Click
/// Handles the user changint the colour to black
///
void ConfigurationPage::btnBlack_Click() {
    ChangeHSVValues(0,0,0,0,0,0);
}

/////////////////////////////////////////////////////////////
/// \brief ConfigurationPage::btnWhite_Click
/// Handles the user changint the colour to white
void ConfigurationPage::btnWhite_Click() {
    ChangeHSVValues(0,0,0,0,100,100);
}

/////////////////////////////////////////////////////////////
/// \brief ConfigurationPage::btnPause_Click
/// Handles the user pausing the video
///
void ConfigurationPage::btnPause_Click() {
    // make sure we're in video mode
    if (_isVideo) {

    }
}

/////////////////////////////////////////////////////////////
/// \brief ConfigurationPage::btnFinish_Click
/// Handles the user closing the page after finishing
///
void ConfigurationPage::btnFinish_Click() {
    this->close();
}

/////////////////////////////////////////////////////////////
/// \brief ConfigurationPage::h_max_Changed
/// Handles the user changing the hmax value
///
/// \param hue
/// The maximum hue for cv::inrange
///
void ConfigurationPage::h_max_Changed(int hue) {
    H_MAX = hue;
}

/////////////////////////////////////////////////////////////
/// \brief ConfigurationPage::h_min_Changed
/// Handles the user changing the hmin value
///
/// \param hue
/// The minimum hue for cv::inrange
///
void ConfigurationPage::h_min_Changed(int hue) {
    H_MIN = hue;
}

/////////////////////////////////////////////////////////////
/// \brief ConfigurationPage::s_max_Changed
/// Handles the user changing the smax value
///
/// \param saturation
/// The maximum saturation for cv::inrange
///
void ConfigurationPage::s_max_Changed(int saturation) {
    S_MAX = saturation;
}

/////////////////////////////////////////////////////////////
/// \brief ConfigurationPage::s_min_Changed
/// Handles teh user changing the smin value
///
/// \param saturation
/// The minimum saturation for cv::inrange
///
void ConfigurationPage::s_min_Changed(int saturation) {
    S_MIN = saturation;
}

/////////////////////////////////////////////////////////////
/// \brief ConfigurationPage::v_max_Changed
/// Handles the user changing the vmax value
///
/// \param value
/// The maximum 'value' for cv:inrange
///
void ConfigurationPage::v_max_Changed(int value) {
    V_MAX = value;
}

/////////////////////////////////////////////////////////////
/// \brief ConfigurationPage::v_min_Changed
/// Handles teh user changing the vmin value
///
/// \param value
/// The minimum 'value' for cv::inrange
///
void ConfigurationPage::v_min_Changed(int value) {
    V_MIN = value;
}
